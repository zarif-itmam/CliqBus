-- 1
CREATE OR REPLACE FUNCTION BUS_COMPANY_RATING(NAME IN VARCHAR2) RETURN NUMBER IS 
	ID NUMBER;
	RATING NUMBER;
BEGIN
	SELECT BUS_COMPANY_ID INTO ID FROM BUS_COMPANY WHERE BUS_COMPANY_NAME=NAME;
	SELECT AVG(BUS_RATING) 
	INTO RATING
	FROM BUS B 
	JOIN BUS_COMPANY BC ON B.BUS_COMPANY_ID=BC.BUS_COMPANY_ID
	WHERE BC.BUS_COMPANY_ID=ID;
	RETURN RATING;
END;

-- 2
CREATE OR REPLACE FUNCTION GET_BUS_COMPANY_NAME(P_BUS_ID IN NUMBER)
RETURN VARCHAR2 IS 
	V_BUS_NAME VARCHAR2(50);
BEGIN 
	SELECT BUS_COMPANY_NAME INTO V_BUS_NAME 
	FROM BUS_COMPANY BB JOIN BUS B ON BB.BUS_COMPANY_ID = B.BUS_COMPANY_ID
	WHERE BUS_ID = P_BUS_ID;
	
	RETURN V_BUS_NAME;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN 
		DBMS_OUTPUT.PUT_LINE('Error. Invalid BUS ID.');
		RETURN NULL;
	WHEN OTHERS THEN 
		DBMS_OUTPUT.PUT_LINE('Unknown Error.');
		RETURN NULL;
END;

-- 3
CREATE OR REPLACE FUNCTION GET_INTERMEDIATE_STANDS(
	P_ROUTE_ID IN NUMBER	
) RETURN VARCHAR2 IS 
	V_INTERMEDIATE_STANDS VARCHAR2(1000);
	S_ID NUMBER;
	E_ID NUMBER;
BEGIN
	SELECT START_STAND_ID INTO S_ID FROM ROUTE WHERE ROUTE_ID = P_ROUTE_ID;
	SELECT END_STAND_ID INTO E_ID FROM ROUTE WHERE ROUTE_ID = P_ROUTE_ID;
	
	SELECT LISTAGG(GET_STAND_NAME(STAND_ID), ',') WITHIN GROUP (ORDER BY STAND_ID)
    INTO V_INTERMEDIATE_STANDS
    FROM ROUTE_STAND
    WHERE ROUTE_ID = P_ROUTE_ID
		AND STAND_ID NOT IN (S_ID, E_ID);

    RETURN V_INTERMEDIATE_STANDS;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN OTHERS THEN
        RETURN NULL;
END;

-- 4
CREATE OR REPLACE FUNCTION GET_ORA_HASH(P_PASSWORD IN NUMBER)
RETURN NUMBER IS
	V_HASH NUMBER;
BEGIN 
	SELECT ORA_HASH(P_PASSWORD) INTO V_HASH FROM DUAL;
	RETURN V_HASH;
EXCEPTION
	WHEN OTHERS THEN 
		DBMS_OUTPUT.PUT_LINE('ERROR IN GET_ORA_HASH');
		RETURN NULL;
END;

-- 5
CREATE OR REPLACE FUNCTION GET_SEAT_NUMBERS(
    P_USER_ID IN NUMBER,
    P_BUS_ID IN NUMBER,
    P_STARTING_STAND IN NUMBER,
    P_ENDING_STAND IN NUMBER,
    P_TRAVEL_TIME IN DATE
)
RETURN VARCHAR2
IS
    V_SEAT_NUMBERS VARCHAR2(4000);
BEGIN
    SELECT LISTAGG(SEAT_NUMBER, ', ') WITHIN GROUP (ORDER BY SEAT_NUMBER)
    INTO V_SEAT_NUMBERS
    FROM TICKET
    WHERE USER_ID = P_USER_ID
      AND BUS_ID = P_BUS_ID
      AND STARTING_STAND = P_STARTING_STAND
      AND ENDING_STAND = P_ENDING_STAND
      AND TRAVEL_TIME = P_TRAVEL_TIME;

    RETURN V_SEAT_NUMBERS;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN OTHERS THEN
        RETURN NULL;
END;

-- 6
CREATE OR REPLACE FUNCTION GET_STAND_ID(P_STAND_NAME IN VARCHAR2)
RETURN NUMBER IS 
	V_STAND_ID NUMBER;
BEGIN 
	SELECT STAND_ID INTO V_STAND_ID 
	FROM STAND
	WHERE STAND_NAME = P_STAND_NAME;
	
	RETURN V_STAND_ID;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN 
		DBMS_OUTPUT.PUT_LINE('Error. Invalid Stand Name.');
		RETURN NULL;
	WHEN OTHERS THEN 
		DBMS_OUTPUT.PUT_LINE('Unknown Error.');
		RETURN NULL;
END;

-- 7
CREATE OR REPLACE FUNCTION GET_STAND_NAME(P_STAND_ID IN NUMBER)
RETURN VARCHAR2 IS 
	V_STAND_NAME VARCHAR2(50);
BEGIN 
	SELECT STAND_NAME INTO V_STAND_NAME 
	FROM STAND
	WHERE STAND_ID = P_STAND_ID;
	
	RETURN V_STAND_NAME;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN 
		DBMS_OUTPUT.PUT_LINE('Error. Invalid Stand ID.');
		RETURN NULL;
	WHEN OTHERS THEN 
		DBMS_OUTPUT.PUT_LINE('Unknown Error.');
		RETURN NULL;
END;

-- 8
CREATE OR REPLACE FUNCTION GET_TOTAL_DISTANCE(R_ID IN NUMBER) RETURN NUMBER IS 
	STARTING_R_S_ID NUMBER;
	ENDING_R_S_ID NUMBER;
	CURR_R_S_ID NUMBER;
	DIFF NUMBER;
	IND NUMBER;
	NEXT_R_S_ID NUMBER;
	CURR_S_ID NUMBER;
	NEXT_S_ID NUMBER;
	T_DIST NUMBER;
	D_SUM NUMBER:=0;
BEGIN 
	SELECT MIN(ROUTE_STAND_ID),MAX(ROUTE_STAND_ID) 
	INTO STARTING_R_S_ID,ENDING_R_S_ID 
	FROM ROUTE_STAND
	WHERE ROUTE_ID=R_ID;
	DIFF:=ENDING_R_S_ID-STARTING_R_S_ID;
	CURR_R_S_ID:=STARTING_R_S_ID;
	NEXT_R_S_ID:=CURR_R_S_ID+1;
	FOR IND IN 1..DIFF
	LOOP 
		SELECT STAND_ID 
		INTO CURR_S_ID 
		FROM ROUTE_STAND 
		WHERE ROUTE_STAND_ID=CURR_R_S_ID;
		SELECT STAND_ID 
		INTO NEXT_S_ID 
		FROM ROUTE_STAND 
		WHERE ROUTE_STAND_ID=NEXT_R_S_ID;
		SELECT TRAVEL_DISTANCE 
		INTO T_DIST 
		FROM DISTANCE
		WHERE STARTING_STAND=CURR_S_ID 
		AND ENDING_STAND=NEXT_S_ID;
		CURR_R_S_ID:=NEXT_R_s_ID;
		NEXT_R_S_ID:=NEXT_R_S_ID+1;
		D_SUM:=D_SUM+T_DIST;
	END LOOP;
	RETURN D_SUM;
END;

-- 9
CREATE OR REPLACE FUNCTION GET_TOTAL_PRICE(
    P_USER_ID IN NUMBER,
    P_BUS_ID IN NUMBER,
    P_STARTING_STAND IN NUMBER,
    P_ENDING_STAND IN NUMBER,
    P_TRAVEL_TIME IN DATE
)
RETURN NUMBER
IS
    V_TOTAL_PRICE NUMBER := 0;
BEGIN
    SELECT NVL(SUM(TICKET_PRICE), 0)
    INTO V_TOTAL_PRICE
    FROM TICKET
    WHERE USER_ID = P_USER_ID
      AND BUS_ID = P_BUS_ID
      AND STARTING_STAND = P_STARTING_STAND
      AND ENDING_STAND = P_ENDING_STAND
      AND TRAVEL_TIME = P_TRAVEL_TIME;

    RETURN V_TOTAL_PRICE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN 0;
END;

-- 10
CREATE OR REPLACE FUNCTION REVENUE(NAME IN VARCHAR2) RETURN NUMBER IS
	EARNING NUMBER;
	ID NUMBER;
BEGIN 
	SELECT BUS_COMPANY_ID INTO ID FROM BUS_COMPANY WHERE BUS_COMPANY_NAME=NAME;
	SELECT SUM(T.TICKET_PRICE)
	INTO EARNING
	FROM TICKET T 
	JOIN BUS B ON T.BUS_ID=B.BUS_ID
	JOIN BUS_COMPANY BC ON B.BUS_COMPANY_ID=BC.BUS_COMPANY_ID 
	WHERE BC.BUS_COMPANY_ID=ID;
	RETURN NVL(EARNING,0);
END;

-- 11
CREATE OR REPLACE FUNCTION TICKETS_SOLD(NAME IN VARCHAR2) RETURN NUMBER IS
	CNT NUMBER;
	ID NUMBER;
BEGIN 
	SELECT BUS_COMPANY_ID INTO ID FROM BUS_COMPANY WHERE BUS_COMPANY_NAME=NAME;
	SELECT COUNT(T.TICKET_ID)
	INTO CNT
	FROM TICKET T 
	JOIN BUS B ON T.BUS_ID=B.BUS_ID
	JOIN BUS_COMPANY BC ON B.BUS_COMPANY_ID=BC.BUS_COMPANY_ID 
	WHERE BC.BUS_COMPANY_ID=ID;
	RETURN CNT;
END;