-- 1
CREATE OR REPLACE TRIGGER TRANSACTION_UPON_BOOKING
AFTER INSERT
ON TICKET
FOR EACH ROW
DECLARE 
	ID NUMBER;
	COST NUMBER;
BEGIN 
	SELECT MAX(TRANSACTION_ID) INTO ID FROM TRANSACTION;
	IF ID IS NULL THEN
		ID:=0;
	END IF;
	INSERT INTO TRANSACTION VALUES(:NEW.TRANSACTION_ID,SYSDATE,:NEW.TICKET_PRICE);
END;

-- 2
CREATE OR REPLACE TRIGGER TRANSACTION_UPON_DELETE
BEFORE DELETE 
ON TICKET
FOR EACH ROW
BEGIN 
	DELETE FROM TRANSACTION
	WHERE TRANSACTION_ID=:OLD.TRANSACTION_ID;
END;

-- 3 
CREATE OR REPLACE TRIGGER RATING_UPON_REVIEW 
BEFORE INSERT 
ON REVIEW 
FOR EACH ROW 
DECLARE 
    B_ID NUMBER;
    S NUMBER;
    CNT NUMBER;
    AVG_S NUMBER;
BEGIN 
    B_ID := :NEW.BUS_ID;
    S := :NEW.SCORE;

    SELECT COUNT(SCORE) INTO CNT FROM REVIEW WHERE BUS_ID = B_ID;

    SELECT NVL(TRUNC(AVG(SCORE), 2), 0) INTO AVG_S FROM REVIEW WHERE BUS_ID = B_ID;

    IF CNT = 0 THEN 
        UPDATE BUS 
        SET BUS_RATING = S
        WHERE BUS_ID = B_ID;
    ELSE 
        UPDATE BUS 
        SET BUS_RATING = TRUNC((AVG_S * CNT + S) / (CNT + 1), 2)
        WHERE BUS_ID = B_ID;
    END IF;
	INSERT INTO TEMP_REVIEW VALUES(:NEW.USER_ID,:NEW.BUS_ID,:NEW.SCORE,:NEW.COMMENTS,SYSDATE,SYSDATE);
END;

-- 4
CREATE OR REPLACE TRIGGER UPDATE_BUS_RATING
BEFORE UPDATE
ON REVIEW
FOR EACH ROW
DECLARE
    v_total_score NUMBER;
    v_review_count NUMBER;
	diff NUMBER;
BEGIN
    IF :OLD.SCORE <> :NEW.SCORE THEN
        
        SELECT NVL(SUM(SCORE), 0), COUNT(*)
        INTO v_total_score, v_review_count
        FROM TEMP_REVIEW
        WHERE BUS_ID = :NEW.BUS_ID;
		diff:=:new.score-:old.score;
        
        UPDATE BUS
        SET BUS_RATING = CASE
                            WHEN v_review_count > 0 THEN (v_total_score+diff) / v_review_count
                            ELSE 0 
                         END
        WHERE BUS_ID = :NEW.BUS_ID;
				
				UPDATE TEMP_REVIEW
				SET SCORE = :NEW.SCORE, COMMENTS = :NEW.COMMENTS,LAST_UPDATED_ON=:NEW.LAST_UPDATED_ON
				WHERE BUS_ID = :NEW.BUS_ID AND USER_ID = :NEW.USER_ID;
    END IF;
END;

-- 5
CREATE OR REPLACE TRIGGER HASHING_UPON_REGISTER
BEFORE INSERT
ON USER_ACCOUNT
FOR EACH ROW
DECLARE
	PASS USER_ACCOUNT.PASSWORD%TYPE;
	HASH USER_ACCOUNT.PASSWORD%TYPE;
BEGIN 
	PASS:=:NEW.PASSWORD;
	SELECT ORA_HASH(PASS) INTO HASH FROM DUAL;
	:NEW.PASSWORD:=HASH;
END;